{"uid":"7723d8ccade65ffd","name":"test_tc_tb[test_case0]","fullName":"tests.test_TC_TB_03#test_tc_tb","historyId":"60da5bc4e668c693515166462a452c53","time":{"start":1755176395727,"stop":1755176396460,"duration":733},"status":"failed","statusMessage":"Failed: Test failed due to incorrect error message.","statusTrace":"browser_config = (<selenium.webdriver.firefox.webdriver.WebDriver (session=\"c8355c32-aabf-4add-b435-473b3d1df4d8\")>, <selenium.webdriver.support.wait.WebDriverWait (session=\"c8355c32-aabf-4add-b435-473b3d1df4d8\")>)\ntest_case = {'class_value': '1500', 'error_message': 'Please enter a number between 1 and 100.', 'promo_code': 'PROMO2025', 'tickets': 11, ...}\n\n    @pytest.mark.parametrize(\"test_case\", first_invalid_case)\n    def test_tc_tb(browser_config, test_case):\n        test_case_name = \"TC_TB_003\"\n        logging.info(f\"{test_case_name} Started..\")\n        driver, wait = browser_config\n        booking_page = BookingPage(driver, wait)\n    \n        # 2. Enter a valid Number of Tickets\n        try:\n            booking_page.enter_number_of_tickets(test_case[\"tickets\"])\n            logging.info(\"Ticket Number Enter successfully.\")\n        except Exception as e:\n            logging.error(\"Element 'Number of Tickets' not found with Explicit wait.\")\n            pytest.fail(\"Test Failed. Bug found for Ticket Number !!!\")\n    \n        # 3. Select valid Ticket Class\n        try:\n            booking_page.select_ticket_class(test_case[\"class_value\"])\n            logging.info(\"Ticket Class Silver - $750 selected.\")\n        except Exception as e:\n            logging.error(\"Element 'Ticket Class' not found with Explicit wait.\")\n            pytest.fail(\"Test Failed. Bug found for Ticket Class !!!\")\n    \n        # 4. Select valid registered user\n        try:\n            booking_page.select_registered_user(test_case[\"user_value\"])\n            logging.info(\"Registered User - 'Yes' selected.\")\n        except Exception as e:\n            logging.error(\"Element 'Register User' not found with Explicit wait.\")\n            pytest.fail(\"Test Failed. Bug found for Register User !!!\")\n    \n        # 5. Enter a valid Promo Code\n        try:\n            booking_page.enter_promo_code(test_case[\"promo_code\"])\n            logging.info(\"Valid Promo Code Enter successfully.\")\n        except Exception as e:\n            logging.error(\"Element 'Promo Code' not found with Explicit wait.\")\n            pytest.fail(\"Test Failed. Bug found for Promo Code !!!\")\n    \n        # 6. Click on the \"Book Now\" button.\n        try:\n            booking_page.click_book_button()\n            logging.info(\"Click on Book Now button successfully.\")\n        except Exception as e:\n            logging.error(\"Element 'Book now' button not found with Explicit wait.\")\n            pytest.fail(\"Test Failed. Bug found for Book Now Button !!!\")\n    \n        # Validate the error message\n        expected_error_message = test_case.get(\"error_message\")\n        actual_error_message = booking_page.get_ticket_error_message()\n    \n        if expected_error_message == actual_error_message:\n            logging.info(\"Test Passed. Expected Error Message matches Actual Error Message.\")\n        else:\n            logging.info(\"Test Failed. Expected Error Message does not match with Actual Error Message!.\")\n    \n            # Take a screenshot on failure and save the path\n            timestamp = datetime.datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n            screenshot_filename = f\"{test_case_name}_failure_{timestamp}.png\"\n            screenshot_path = os.path.join(\"logs\", \"bug_reports\", screenshot_filename)\n            capture_full_page_screenshot(driver, screenshot_path)\n    \n            # Generate the bug report string using the new function\n            bug_report_content = generate_bug_report(test_case, actual_error_message, expected_error_message,\n                                                     screenshot_path, test_case_name)\n    \n            # Save the report to a separate file using the new function\n            save_bug_report(bug_report_content, test_case_name)\n    \n>           pytest.fail(\"Test failed due to incorrect error message.\")\nE           Failed: Test failed due to incorrect error message.\n\ntests\\test_TC_TB_03.py:87: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"browser_config","time":{"start":1755176388231,"stop":1755176395727,"duration":7496},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0}],"testStage":{"status":"failed","statusMessage":"Failed: Test failed due to incorrect error message.","statusTrace":"browser_config = (<selenium.webdriver.firefox.webdriver.WebDriver (session=\"c8355c32-aabf-4add-b435-473b3d1df4d8\")>, <selenium.webdriver.support.wait.WebDriverWait (session=\"c8355c32-aabf-4add-b435-473b3d1df4d8\")>)\ntest_case = {'class_value': '1500', 'error_message': 'Please enter a number between 1 and 100.', 'promo_code': 'PROMO2025', 'tickets': 11, ...}\n\n    @pytest.mark.parametrize(\"test_case\", first_invalid_case)\n    def test_tc_tb(browser_config, test_case):\n        test_case_name = \"TC_TB_003\"\n        logging.info(f\"{test_case_name} Started..\")\n        driver, wait = browser_config\n        booking_page = BookingPage(driver, wait)\n    \n        # 2. Enter a valid Number of Tickets\n        try:\n            booking_page.enter_number_of_tickets(test_case[\"tickets\"])\n            logging.info(\"Ticket Number Enter successfully.\")\n        except Exception as e:\n            logging.error(\"Element 'Number of Tickets' not found with Explicit wait.\")\n            pytest.fail(\"Test Failed. Bug found for Ticket Number !!!\")\n    \n        # 3. Select valid Ticket Class\n        try:\n            booking_page.select_ticket_class(test_case[\"class_value\"])\n            logging.info(\"Ticket Class Silver - $750 selected.\")\n        except Exception as e:\n            logging.error(\"Element 'Ticket Class' not found with Explicit wait.\")\n            pytest.fail(\"Test Failed. Bug found for Ticket Class !!!\")\n    \n        # 4. Select valid registered user\n        try:\n            booking_page.select_registered_user(test_case[\"user_value\"])\n            logging.info(\"Registered User - 'Yes' selected.\")\n        except Exception as e:\n            logging.error(\"Element 'Register User' not found with Explicit wait.\")\n            pytest.fail(\"Test Failed. Bug found for Register User !!!\")\n    \n        # 5. Enter a valid Promo Code\n        try:\n            booking_page.enter_promo_code(test_case[\"promo_code\"])\n            logging.info(\"Valid Promo Code Enter successfully.\")\n        except Exception as e:\n            logging.error(\"Element 'Promo Code' not found with Explicit wait.\")\n            pytest.fail(\"Test Failed. Bug found for Promo Code !!!\")\n    \n        # 6. Click on the \"Book Now\" button.\n        try:\n            booking_page.click_book_button()\n            logging.info(\"Click on Book Now button successfully.\")\n        except Exception as e:\n            logging.error(\"Element 'Book now' button not found with Explicit wait.\")\n            pytest.fail(\"Test Failed. Bug found for Book Now Button !!!\")\n    \n        # Validate the error message\n        expected_error_message = test_case.get(\"error_message\")\n        actual_error_message = booking_page.get_ticket_error_message()\n    \n        if expected_error_message == actual_error_message:\n            logging.info(\"Test Passed. Expected Error Message matches Actual Error Message.\")\n        else:\n            logging.info(\"Test Failed. Expected Error Message does not match with Actual Error Message!.\")\n    \n            # Take a screenshot on failure and save the path\n            timestamp = datetime.datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n            screenshot_filename = f\"{test_case_name}_failure_{timestamp}.png\"\n            screenshot_path = os.path.join(\"logs\", \"bug_reports\", screenshot_filename)\n            capture_full_page_screenshot(driver, screenshot_path)\n    \n            # Generate the bug report string using the new function\n            bug_report_content = generate_bug_report(test_case, actual_error_message, expected_error_message,\n                                                     screenshot_path, test_case_name)\n    \n            # Save the report to a separate file using the new function\n            save_bug_report(bug_report_content, test_case_name)\n    \n>           pytest.fail(\"Test failed due to incorrect error message.\")\nE           Failed: Test failed due to incorrect error message.\n\ntests\\test_TC_TB_03.py:87: Failed","steps":[],"attachments":[{"uid":"8bb30f3b337743c7","name":"log","source":"8bb30f3b337743c7.txt","type":"text/plain","size":1157}],"parameters":[],"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true,"stepsCount":0},"afterStages":[{"name":"browser_config::0","time":{"start":1755176396591,"stop":1755176399722,"duration":3131},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_TC_TB_03"},{"name":"host","value":"Muntasir"},{"name":"thread","value":"20320-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_TC_TB_03"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"test_case","value":"{'tickets': 11, 'class_value': '1500', 'user_value': 'yes', 'promo_code': 'PROMO2025', 'error_message': 'Please enter a number between 1 and 100.'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"7723d8ccade65ffd.json","parameterValues":["{'tickets': 11, 'class_value': '1500', 'user_value': 'yes', 'promo_code': 'PROMO2025', 'error_message': 'Please enter a number between 1 and 100.'}"]}